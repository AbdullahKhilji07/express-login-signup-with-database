import express from "express";
import cors from "cors";
import mongoose from "mongoose";
import { stringToHash, verifyHash } from "bcrypt-inzi";
import dotenv from "dotenv";

dotenv.config(); // Load environment variables

const app = express();
app.use(express.json());
app.use(cors({ origin: "http://127.0.0.1:5500" })); // Frontend running on port 5500

const port = process.env.PORT || 1113;

// MongoDB connection string (move it to .env file)
const dbURI = process.env.MONGO_URI || "your-default-mongo-uri";

mongoose.connect(dbURI).catch((err) => console.error("Mongoose connection error:", err));

mongoose.connection.on("connected", () => console.log("Mongoose is connected."));
mongoose.connection.on("error", (err) => console.error("Mongoose connection error:", err));
mongoose.connection.on("disconnected", () => console.log("Mongoose is disconnected."));

process.on("SIGINT", () => {
    mongoose.connection.close(() => {
        console.log("Mongoose connection closed due to app termination.");
        process.exit(0);
    });
});

// User Schema
const userSchema = new mongoose.Schema({
    firstName: { type: String, required: true },
    lastName: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    age: { type: Number, min: 17, max: 65, default: 18 },
    isMarried: { type: Boolean, default: false },
    createdOn: { type: Date, default: Date.now },
});
const userModel = mongoose.model("User", userSchema);

// Routes

// Signup Route
app.post("/signup", async (req, res) => {
    const { firstName, lastName, email, password } = req.body;

    if (!firstName || !lastName || !email || !password) {
        return res.status(400).send({
            message: "All fields are required.",
        });
    }

    try {
        const existingUser = await userModel.findOne({ email }).exec();
        if (existingUser) {
            return res.status(400).send({
                message: "Email is already registered.",
            });
        }

        const hashedPassword = await stringToHash(password);
        const newUser = new userModel({
            firstName,
            lastName,
            email,
            password: hashedPassword,
        });

        await newUser.save();
        res.status(201).send({ message: "User created successfully." });
    } catch (error) {
        console.error("Error in signup:", error);
        res.status(500).send({ message: "Internal server error." });
    }
});

// Login Route
app.post("/login", async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).send({
            message: "Email and password are required.",
        });
    }

    try {
        const user = await userModel.findOne({ email }).exec();
        if (!user) {
            return res.status(404).send({
                message: "User not found.",
            });
        }

        const isPasswordValid = await verifyHash(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).send({
                message: "Incorrect password.",
            });
        }

        res.status(200).send({
            message: "Login successful.",
            user: {
                firstName: user.firstName,
                lastName: user.lastName,
                email: user.email,
            },
        });
    } catch (error) {
        console.error("Error in login:", error);
        res.status(500).send({ message: "Internal server error." });
    }
});

// Get All Users Route
app.get("/users", async (req, res) => {
    try {
        const users = await userModel.find({});
        res.send(users);
    } catch (error) {
        console.error("Error fetching users:", error);
        res.status(500).send({ message: "Error getting users." });
    }
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
